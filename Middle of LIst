/* middle using slow and fast pointer
  */

int getMiddle(Node *head)
{
   Node *slow = head;
   Node *fast = head;
   
   if(head == NULL) return NULL;
   
   while(fast!=NULL && fast->next!=NULL)
   {
       slow = slow->next;
       fast = fast->next->next;
    
   }
   
   return slow->data;
}


//run on mid count

// { Driver Code Starts
/* Function to get the middle of the linked list*/

#include <bits/stdc++.h> 
using namespace std; 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
void printList(Node* node) 
{ 
	while (node != NULL) { 
		cout << node->data <<" "; 
		node = node->next; 
	}  
	cout<<"\n";
} 
/* Function to get the middle of the linked list*/
int getMiddle(Node *head);
int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;

		int data;
		cin>>data;
		struct Node *head = new Node(data);
		struct Node *tail = head;
		for (int i = 0; i < n-1; ++i)
		{
			cin>>data;
			tail->next = new Node(data);
			tail = tail->next;
		}
		cout<<getMiddle(head)<<endl;
	}
	return 0; 
} 

// } Driver Code Ends

int getMiddle(Node *head)
{
   Node *mid = head;
   int count = 0;
   while(head != NULL)
   {
       // if we have odd count value
       if(count & 1)
        mid = mid->next;
       
       count++;
       head = head->next;
   }
   
   return mid->data;
}
