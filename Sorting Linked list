Node* findMid(Node* node) {
        Node* slow = node;
        Node* fast = node;
       Node* prev;
        while (fast != NULL and fast->next != NULL) {
           prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        prev ->next = NULL;
   
        return slow;
    }
    Node* merge(Node* l1, Node* l2)
    {
        if(!l1) return l2;
        if(!l2) return l1;
        Node* temp;
        if(l1->data <= l2->data)
        {
            temp = l1;
            l1->next = merge(l1->next, l2);
        }
        else
        {
            temp = l2;
            l2->next = merge(l1, l2->next);
        }
        return temp;
    }
    Node* mergeSort(Node* head) {
        // your code here
        if(head == NULL or head->next == NULL) return head;
       
        Node* mid = findMid(head);
       
        Node* left = mergeSort(head);
        Node* right = mergeSort(mid);
       
        return merge(left, right);
    }
